# http://www.redhat.com/docs/manuals/enterprise/RHEL-5-manual/Installation_Guide-en-US/s1-kickstart2-options.html
# http://blog.scottlowe.org/2007/07/09/linux-ad-integration-with-windows-server-2008/
# http://blog.wazollc.com/Lists/Posts/Post.aspx?ID=2
# http://spiralbound.net/2007/04/11/rhel-winbind-authentication-against-active-directory
# https://www.lavalite.de/2008/10/22/vga-modes-when-booting-the-linux-kernel/
# http://blog.scottlowe.org/2006/08/08/linux-active-directory-and-windows-server-2003-r2-revisited/
# http://www.chekmate.org/wiki/index.php/Post-kickstart.sh
# http://www.oddee.com/item_96636.aspx
# http://blog.wazollc.com/Lists/Posts/Post.aspx?ID=2
# http://forums13.itrc.hp.com/service/forums/questionanswer.do?admit=109447627+1244131644334+28353475&threadId=1252560

# Add kerberos and/or smb or something to authenticate
# against the NAI-ENG AD domain here - testing with
# just plain shadow passwords for the moment.
authconfig --enablemd5 --enableshadow

# Set a grub password to stop naughty people rebooting
# and changing the root password. Also set the kernel to
# boot in a slightly higher resolution VGA mode so we
# can see more than 80x25 text.
bootloader --location=mbr --append="vga=0x305" --md5pass=$1$leOHOVOP$LZOYB9fxR0gE8WtIJGUHp1

# Command line text only installation - stop for nothing!
#cmdline
#interactive
autostep --autoscreenshot

reboot
install
skipx
text
key --skip
logging --host=logger1.ayl.ase.nai.org --level=debug
firstboot --disable

# Install over HTTP using ipv4/dhcp by default.
# network --bootproto=dhcp --nameserver=192.168.130.201,192.168.139.116,192.168.139.4,192.168.139.5 --noipv6
network --bootproto=dhcp --noipv6
url --url http://bootserv/CentOS-5.3-x86_64

firewall --enabled --port=22:tcp --port=5666:tcp --port=161:udp --port=80:tcp --port=443:tcp
selinux --disabled
services --disabled=pcscd --enabled=httpd,sshd,exim,snmpd
rootpw --iscrypted $1$PSIdV8jd$yjjmP/NtTbGtmlEmFl5B20
user --name=admin --groups=admin,wheel --password=Welcome2Mcafee

# Set locate stuff.
keyboard uk
lang en_GB
timezone --utc Europe/London

# Add additional yum repositories.
#repo --name=rpmforge --baseurl=http://apt.sw.be/redhat/el5/en/x86_64/dag
#http://archive.cs.uu.nl/mirror/dag.wieers/redhat/el5/en/x86_64/dag,http://apt.sw.be/redhat/el5/en/x86_64/dag,http://archive.cs.uu.nl/mirror/dag.wieers/redhat/el5/en/x86_64/dag,http://ftp2.lcpe.uni-sofia.bg/freshrpms/pub/dag/redhat/el5/en/x86_64/dag,http://ftp-stud.fht-esslingen.de/dag/redhat/el5/en/x86_64/dag,http://mirror.cpsc.ucalgary.ca/mirror/dag/redhat/el5/en/x86_64/dag,http://mirrors.ircam.fr/pub/dag/redhat/el5/en/x86_64/dag,http://rh-mirror.linux.iastate.edu/pub/dag/redhat/el5/en/x86_64/dag,http://rpmfind.net/linux/dag/redhat/el5/en/x86_64/dag,http://wftp.tu-chemnitz.de/pub/linux/dag/redhat/el5/en/x86_64/dag,http://www.mirrorservice.org/sites/apt.sw.be/redhat/el5/en/x86_64/dag

%include /tmp/part-include

%packages
-dos2unix
-lftp
-ksh
-isdn4k-utils
-ecryptfs-utils
-system-config-securitylevel-tui
-system-config-network-tui
-firstboot-tui
-cups
-postfix
-sendmail
-ash
-aspell
-aspell-en
-bluez-bluefw
-bluez-hcidump
-bluez-libs
-bluez-utils
-cups-libs
-cyrus-sasl
-cyrus-sasl-md5
-cyrus-sasl-plain
-desktop-file-utils
-finger
-fontconfig
-freetype
-gpm
-htmlview
-irda-utils
-minicom
-nano
-NetworkManager
-pcmcia-cs
-pdksh
-pinfo
-ppp
-redhat-lsb
-redhat-menus
-rp-pppoe
-rsh
-talk
-tcsh
-wireless-tools
-wvdial
-xorg-x11-libs
-xorg-x11-Mesa-libGL

net-snmp
httpd
mod_ssl
bzip2
compat-libstdc++-33
e2fsprogs
mysql
ntp
exim
rsync
screen
sharutils
strace
tcpdump
sysstat
vim-enhanced
wget

samba
samba-common
samba-client
openldap
openldap-clients
nss_ldap
autofs

perl
perl-Archive-Tar
perl-Archive-Zip
#perl-Bit-Vector
#perl-BSD-Resource
#perl-Carp-Clan
perl-Compress-Zlib
perl-Config-General
#perl-Convert-ASN1
perl-Crypt-SSLeay
perl-Date-Calc
perl-DateManip
perl-DBD-MySQL
perl-DBD-Pg
perl-DBI
#perl-Digest-HMAC
perl-Digest-SHA1
#perl-HTML-Parser
#perl-HTML-Tagset
#perl-IO-Socket-INET6
perl-IO-Socket-SSL
#perl-IO-String
perl-IO-Zlib
perl-LDAP
perl-libwww-perl
perl-libxml-perl
#perl-Mozilla-LDAP
perl-Net-DNS
perl-Net-IP
perl-Net-SSLeay
perl-Net-Telnet
#perl-NKF
#perl-SGMLSpm
#perl-Socket6
#perl-String-CRC32
#perl-suidperl
perl-TimeDate
perl-URI
#perl-XML-Dumper
#perl-XML-Grove
#perl-XML-LibXML
#perl-XML-LibXML-Common
#perl-XML-NamespaceSupport
#perl-XML-Parser
#perl-XML-SAX
perl-XML-Simple
#perl-XML-Twig

%pre
#!/bin/bash
#dmidecode | grep VMware

function pause() {
        read -p "$*"
}

device="sda"
deviceSize="0"

# Check in reverse order
for dev in hda sda; do
        size="`sed -n \"/${dev}$/p\" /proc/partitions | awk '{ print $3 }'`"
        if [ -n "$deviceSize" ] && [ "$deviceSize" -ge 1000000 ]; then
                device="$dev"
        fi
done

echo "device='$device'"
deviceSize="`sed -n \"/${device}$/p\" /proc/partitions | awk '{ print $3 }'`"
echo "deviceSize='$deviceSize'"

cat > /tmp/part-include <<__EOP__
clearpart --linux --initlabel --drives=$device
zerombr
__EOP__

# Unable to install on to disks less than 8GB
if [ $deviceSize -le 8300000 ]; then
        pause "Device '/dev/$device' is too small. Press ENTER to reboot system."
        reboot

# Perform a large disk install
elif [ $deviceSize -ge 30000000 ]; then
        cat >> /tmp/part-include <<__EOP__
part /     --fstype ext3 --size 512   --ondisk=$device --asprimary
part /boot --fstype ext3 --size 150   --ondisk=$device --asprimary
part /usr  --fstype ext3 --size 5120  --ondisk=$device --asprimary
part /var  --fstype ext3 --size 10240 --ondisk=$device
part /tmp  --fstype ext3 --size 256   --ondisk=$device
part swap                --size 2048  --ondisk=$device
part /home --fstype ext3 --size 10240 --ondisk=$device --fsoptions=usrquota,grpquota --grow --maxsize=102400
__EOP__

# Perform a small disk install
else
        cat >> /tmp/part-include <<__EOP__
part /     --fstype ext3 --size 512  --ondisk=$device --asprimary
part /boot --fstype ext3 --size 150  --ondisk=$device --asprimary
part /usr  --fstype ext3 --size 1536 --ondisk=$device --asprimary
part /var  --fstype ext3 --size 2048 --ondisk=$device
part /tmp  --fstype ext3 --size 256  --ondisk=$device
part swap                --size 512  --ondisk=$device
part /home --fstype ext3 --size 1024 --ondisk=$device --fsoptions=usrquota,grpquota --grow
__EOP__
fi

echo "Using the following partition layout:"
cat /tmp/part-include

%post
# Define some constants
export KS=""
export KS_BASENAME=""
export METHOD=""
export BOOTSERVER=""
export BOOTSERV_HTTPBASE=""
export BOOTSERV_KSURL=""
export LOGDIR="/var/log/build"
export MAILTO="airoot@mcafee.com"
export DOT_KCMDLINE="$LOGDIR/kskcmdline.txt"
export ADIP="192.168.130.201"
export ADHOST="engrootdc1.naieng.nai.org"
export ADREALM="NAIENG.NAI.ORG"

# Log everything baby
mkdir -vp "$LOGDIR"
chown root:root "$LOGDIR"
chmod 700 "$LOGDIR"
cp -vp /root/* "$0" "$LOGDIR"

# Redirect and capture TTY output
exec < /dev/tty3 > /dev/tty3
chvt 3
(

function logmsg() {
        message="$*"
        if test -z "$message"; then
                message="-- MARK --"
        fi
	if echo "$message" | egrep "[a-zA-Z0-9]" >/dev/null 2>&1; then 
		logger -i "$message"
	fi
        time="`date +'%b %d %H:%M:%S'`"
        host="`hostname`"
        echo "$time $host $0[$$]: $message" >&2
}

function announce() {
	logmsg " "
	logmsg " "
	logmsg "==========================================================="
	logmsg "$*"
	logmsg "==========================================================="
}

# Try and extract variables from the kernel command line
announce "Extracting variables from the kernel command line"
if ! [ -f $DOT_KCMDLINE ]; then cp /proc/cmdline $DOT_KCMDLINE ;fi
logmsg "Kernel command line: `cat $DOT_KCMDLINE`"
for kopt in `cat $DOT_KCMDLINE`
do
        key=`echo $kopt | cut -d'=' -f1 -`
        value=`echo $kopt | cut -d'=' -f2 -`
	logmsg "Kernel option '$key'='$value'"
        if [ "$key" = "method"   ]; then METHOD="$value"   ;fi
        if [ "$key" = "ks"       ]; then KS="$value"       ;fi
        if [ "$key" = "mailto"   ]; then MAILTO="$value"   ;fi
done

# Dynamically discover the bootserver IP/hostname
if [ -z "$BOOTSERVER" ] && [ -n "$METHOD" ]; then
        logmsg "Attempting to extract BOOTSERVER from METHOD '${METHOD}' ..."
        BOOTSERVER=`echo "$METHOD" | cut -d'/' -f3`
fi
if [ -z "$BOOTSERVER" ] && [ -n "$KS" ]; then
        logmsg "Attempting to extract BOOTSERVER from KS '${KS}' ..."
        BOOTSERVER=`echo "$KS" | cut -d'/' -f3`
fi

# Ensure finial variables are set
[ -z "$HOSTNAME" ] && HOSTNAME=`hostname`
[ -z "$BOOTSERVER" ] && BOOTSERVER=
BOOTSERV_HTTPBASE=http://${BOOTSERVER}
BOOTSERV_KSURL=$BOOTSERV_HTTPBASE/ks
KS_BASENAME="`echo \"${KS}\" | sed -e 's/.*\///'`"

# Tell the nice people what we decided
logmsg "LOGDIR            = '${LOGDIR}'"
logmsg "MAILTO            = '${MAILTO}'"
logmsg "BOOTSERVER        = '${BOOTSERVER}'"
logmsg "BOOTSERV_HTTPBASE = '${BOOTSERV_HTTPBASE}'"
logmsg "BOOTSERV_KSURL    = '${BOOTSERV_KSURL}'"
logmsg "KS                = '${KS}'"
logmsg "METHOD            = '${METHOD}'"
sleep 6


function kickstart() {
	# Syslog
	announce "Configuring syslog"
	cfg=/etc/syslog.conf
	echo "kern.* /var/log/kern.log" >> $cfg
	echo "*.* @logger1.ayl.ase.nai.org" >> $cfg
	echo "*.* @logger2.ayl.ase.nai.org" >> $cfg
	service syslog restart


	# Correct the timezone
	announce "Correcting timezone"
	# http://kbase.redhat.com/faq/docs/DOC-15687
	mv -fv /etc/sysconfig/clock /etc/sysconfig/clock.ORIG
	sed 's@^ZONE.*@ZONE="Etc/GMT"@' /etc/sysconfig/clock.ORIG > /etc/sysconfig/clock
	/usr/sbin/tzdata-update


	# Install RPM forge repository
	announce "Installing RPM forge repository"
	rpm -Uhv http://apt.sw.be/redhat/el5/en/x86_64/rpmforge/RPMS/rpmforge-release-0.3.6-1.el5.rf.x86_64.rpm


	# Install new packages
	announce "Installing new Perl packages"
	yum -y install perl-Unix-Syslog perl-Config-General perl-Proc-ProcessTable perl-FileTail perl-Cache perl-DBD-SQLite
	# yum -y install perl-rrdtool perl-RRD-Simple
	yum -y install nagios-nrpe nagios-plugins
	chkconfig nrpe on


	# Update RPM packages
	announce "Updating RPM packages"
	yum -y update


	# Daily logrotate
	announce "Setting daily log rotation"
	cfg=/etc/logrotate.conf
	perl -pi -e 's,^weekly,daily,' $cfg
	perl -pi -e 's,(^rotate )4,$1 28,' $cfg
	perl -pi -e 's,#(compress yes),$1,' $cfg
	perl -pi -e 's,(/var/log/cron),$1 /var/log/kern.log,' /etc/logrotate.d/syslog


	# Reduce shell history and turn on timeouts
	announce "Configuring shell history and timeout settings"
	cfg="/etc/profile"
	mv -fv "$cfg" "$cfg.orig"
	sed "s/HISTSIZE=1000/HISTSIZE=10/" "$cfg.orig" > "$cfg"
	echo "HISTFILESIZE=0" >> "$cfg"
	echo "TMOUT=7200" >> "$cfg"


	# Configure SNMP
	announce "Configuring SNMP"
	cfg=/etc/snmp/snmpd.conf
	echo "com2sec notConfigUser  default      PUBLIC-SECRET" >>"$cfg"
	echo "view    systemview    included   .1.3.6.1.2.1.1" >>"$cfg"
	echo "view    systemview    included   .1.3.6.1" >>"$cfg"
	echo "view    systemview    included   .1.3.6.1.2.1.2" >>"$cfg"
	echo "view    systemview    included   .1.3.6.1.2.1.25.1.1" >>"$cfg"
	chkconfig --level 12345 snmpd on


	# Install Dell OSMA
	if dmidecode | grep -i "Dell PowerEdge" >/dev/null 2>&1; then
		announce "Installing Dell OSMA"
		wget -q -O - http://linux.dell.com/repo/hardware/latest/bootstrap.cgi | bash
		wget -q -O - http://linux.dell.com/repo/community/bootstrap.cgi | bash
		wget -q -O - http://linux.dell.com/repo/firmware/bootstrap.cgi | bash
		yum -y install srvadmin-all

	# Install HP Insight Manager
	elif dmidecode | grep -i "ProLiant" >/dev/null 2>&1; then
		announce "Installing HP Insight Manager"
		#stub

	# Install IBM Director
	elif dmidecode | grep -i "IBM System X" >/dev/null 2>&1; then
		announce "Installing IBM Director"
		#stub

	# Install VMware Tools
	elif dmidecode | grep -i "VMware" >/dev/null 2>&1; then
		announce "Installing VMware Tools"
		#stub
	fi


	# Enable accounting
	announce "Enabling process accounting"
	chkconfig --level 12345 sysstat on


	# Setuid dmidecode
	#announce "Setuid dmidecode"
	#chmod u+s /usr/sbin/dmidecode


#	# Creating a default /etc/exports file
#	announce "Creating /etc/exports"
#	cat >/etc/exports <<_EOT_
#/home *(ro,root_squash)
#_EOT_


	# Admin/Root key
	announce "Adding root and admin ssh keys"
	for user in root admin; do
		homedir="`getent passwd $user | cut -d':' -f 6`"
		mkdir -vp "$homedir/.ssh"
		chown -v $user:$user "$homedir/.ssh"
		chmod -v 700 "$homedir/.ssh"
		logmsg "Creating $homedir/.ssh/authorized_keys2"
		echo "ssh-dss AAAAB3NzaC1kc3MAAACBAMgBmvt7j7X+/cVemXy6E/raEsPMxx76iYiSZZhbIR0wsAmQlM7BMyw77sl36wd3iRU8oH/J0RGVeOjRfHcydKObCSmm+ve6v1P7m0BjV+pPSHKQMOoyFs9BRzXCuiULpnzdqTZF6SBa3nqse891Lbwet4Sb6pwpmR9Mx8ylQD9fAAAAFQDeULW2sKdhA3LINNCMGkXEcfVCaQAAAIEApp1nyPB9Q2vxc4/ndBFWsnDeDbOtEkCW9GUh5480GuqLLtOd4TtFqfv++YiMgAWLe92baaesOe4D/vLHPcOB5oYvVUZH58WSP0ED46dFRn8nhIMrPO5cxKX6G3NWm4XydM6n1RO3T65b2jSrLUlOwyGycM1y/0FKIXonsA+mjukAAACAS2oZpZHOpUJnGbLVYGpdegmYkjvKlLRCZLF273r97ybkX/JjAs6kuyc903k0+Nj6d0tSL2+85vlD8JbdXp+yEfckXZRUQeVkz4eIt9FbkKhFDul73NKHPygzi52gwE4G+mAb6HxDEWR8EjUzimwMmDuE56tcRqt/bDz4u/pAMas= Aylesbury Avert Infrastructure Root Key" >> "$homedir/.ssh/authorized_keys2"
		chown -v $user:$user "$homedir/.ssh/authorized_keys2"
		chmod -v 644 "$homedir/.ssh/authorized_keys2"
	done


	# Secure SSH
	announce "Securing SSH"
	cfg=/etc/ssh/sshd_config
	echo "AllowGroups root wheel infraadmins" >> $cfg
	#echo "AllowGroups root wheel fireperson infraadmins aseadmins" >> $cfg
	for opt in UseDNS PermitRootLogin PermitEmptyPasswords ShowPatchLevel HostbasedAuthentication AllowTcpForwarding X11Forwarding PermitTunnel PermitUserEnvironment GatewayPorts
	do
		logmsg "Setting '$opt no' in '$cfg'"
		perl -pi -e "s,^\s*#?\s*($opt)\s+.*,\$1 no," $cfg
	done
	#perl -pi -e 's,#?(PasswordAuthentication) .*,$1 no,'  $cfg
	#perl -pi -e 's,#?(PermitRootLogin) .*,$1 no,'         $cfg
	#perl -pi -e 's,#?(PermitEmptyPasswords) .*,$1 no,'    $cfg
	#perl -pi -e 's,#?(ShowPatchLevel) .*,$1 no,'          $cfg
	#perl -pi -e 's,#?(HostbasedAuthentication) .*,$1 no,' $cfg
	#perl -pi -e 's,#?(AllowTcpForwarding) .*,$1 no,'      $cfg
	#perl -pi -e 's,#?(X11Forwarding) .*,$1 no,'           $cfg
	#perl -pi -e 's,#?(PermitTunnel) .*,$1 no,'            $cfg
	for opt in StrictModes PrintMotd PrintLastLog UsePrivilegeSeparation IgnoreRhosts TCPKeepAlive
	do
		logmsg "Setting '$opt yes' in '$cfg'"
		perl -pi -e "s,^\s*#?\s*($opt)\s+.*,\$1 yes," $cfg
	done
	#perl -pi -e 's,#?(StrictModes) .*,$1 yes,'             $cfg
	#perl -pi -e 's,#?(PrintMotd) .*,$1 yes,'               $cfg
	#perl -pi -e 's,#?(PrintLastLog) .*,$1 yes,'            $cfg
	#perl -pi -e 's,#?(UsePrivilegeSeparation) .*,$1 yes,'  $cfg
	#perl -pi -e 's,#?(IgnoreRhosts) .*,$1 yes,'            $cfg
	perl -pi -e 's,#?(Protocol 2)\,1,$1,'                   $cfg
	perl -pi -e 's,#?(LogLevel) .*,$1 VERBOSE,'             $cfg
	perl -pi -e 's,#?(?:(Banner\s+)\S+),$1 /etc/issue.net,' $cfg


	# Make /etc/issue and /etc/issue.net
	announce "Creating /etc/issue and /etc/issue.net"
	cat >/etc/issue <<_EOT_
###############################################################################################################################
#                                                                                                                             #
#  This server has been secured.                                                                                              #
#  Built: `date`                                                                                        #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
#                                                                                                                             #
###############################################################################################################################
_EOT_
	cat >/etc/issue.net <<_EOT_
###############################################################################
#                                                                             #
#  This server has been secured.                                              #
#  Built: `date`                                        #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
###############################################################################
_EOT_


	# Generate a default motd
	announce "Creating /etc/motd"
	cat >/etc/motd <<_EOT_
Server build on `date`.

Kickstart build logs can be found in /var/log/build. A complete summary of the
build should have been emailed to $MAILTO.

Please make sure that you add this machine to the $ADDOMAIN active directory
domain using the 'net' command (any administrative username will work):
   net join -U administrator@$ADREALM
   service winbind start

You can test that the active directory authenication is working with:
   wbinfo -u
   getent passwd

_EOT_


	# Sudo access
	announce "Configuring sudo access"
	cfg=/etc/sudoers
	perl -pi -e 's,# (%wheel\s+ALL=\(ALL\)\s+ALL),$1,;' $cfg
	echo "%infraadmins ALL=(ALL) ALL" >> $cfg
	#echo "%aseadmins ALL=(ALL) ALL" >> $cfg
	#echo "%fireperson ALL=(ALL) ALL" >> $cfg


#	# Remove unneeded rpm packages
#	announce "Removing unneeded RPM packages"
#	for package in ntsysv setuptool ash cups cups-libs cyrus-sasl-plain dhcpv6_client dos2unix dump fbset finger gettext ipsec-tools irda-utils isdn4k-utils lha libwvstreams lockdev logwatch mdadm minicom mt-st nano netconfig netdump nscd parted pax pdksh pinfo ppp psacct rdate rdist redhat-lsb redhat-menus rhnlib rhpl rmt rp-pppoe schedutils setarch specspo stunnel symlinks sysreport system-config-mouse system-config-network-tui system-config-securitylevel-tui talk unix2dos up2date wireless-tools wvdial ypbind yp-tools; do
#		yum -y remove $package
#	done


	# Route all email to shared mailbox
	announce "Configuring mail redirection to $MAILTO"
	echo "root: $MAILTO" >> /etc/aliases
	newaliases


	# Add extra service checks for Nagios NRPE
	announce "Configuring extra NRPE service checks"
	cfg=/etc/nagios/nrpe.d
	mkdir -vp "$cfg"
	perl -pi -e 's/(allowed_hosts=).*/${1}192.168.139.8,192.168.139.9,192.168.139.10,192.168.139.11,172.16.128.46,172.16.128.48,192.168.130.121,192.168.32.112,192.168.140.230,192.168.148.221,192.168.148.222/;' /etc/nagios/nrpe.cfg
	echo "include_dir=$cfg" >> /etc/nagios/nrpe.cfg
	cat >/tmp/nrpe-config <<__EOC__
check_users /usr/lib64/nagios/plugins/check_users -w 15 -c 25
check_load /usr/lib64/nagios/plugins/check_load -w 15,12,9 -c 35,27,25
check_zombie_procs /usr/lib64/nagios/plugins/check_procs -w 5 -c 10 -s Z
check_total_procs /usr/lib64/nagios/plugins/check_procs -w 400 -c 1000
check_megaraid26 /usr/lib64/nagios/plugins/check_megaraid26 -m /home/nagios/libexec -w 5 -c 5
check_megaraid26_2850 /usr/lib64/nagios/plugins/check_megaraid26 -m /home/nagios/libexec -w 5 -c 5
check_megaraid26_1850 /usr/lib64/nagios/plugins/check_megaraid26 -m /home/nagios/libexec -w 2 -c 2
check_perc5i /usr/lib64/nagios/plugins/check_perc5i
check_nfs /usr/lib64/nagios/plugins/check_local_nfs
check_postfix_queue /usr/lib64/nagios/plugins/check_queue -Q '/var/spool/postfix/incoming /var/spool/postfix/defer* /var/spool/postfix/active' -w 2000 -e 10000
check_mailq /usr/lib64/nagios/plugins/check_mailq
check_swap /usr/lib64/nagios/plugins/check_swap -w 40% -c 25%
check_ndb_mgmd /usr/lib64/nagios/plugins/check_procs -w 1:1 -c 1:1 -C ndb_mgmd
check_ndbd /usr/lib64/nagios/plugins/check_procs -w 4:4 -c 4:4 -C ndbd
check_mysqld /usr/lib64/nagios/plugins/check_procs -w 1:1 -c 1:1 -C mysqld
check_mysqld_safe /usr/lib64/nagios/plugins/check_procs -w 1:1 -c 1:1 -C mysqld_safe
check_ipmi /usr/lib64/nagios/plugins/check_ipmi
check_disk /usr/lib64/nagios/plugins/check_disk -w 20 -c 10
__EOC__
	while read line; do
		check=`echo "$line" | cut -d' ' -f1`
		command=`echo "$line" | cut -d' ' -f2-`
		logmsg "Writing 'command[$check]=$command' to '$cfg/$check.cfg' ..."
		echo "command[$check]=$command" > "$cfg/$check.cfg"
	done < /tmp/nrpe-config


	# Install psmon
	announce "Installing psmon"
	cfg=/tmp/root.crontab
	mkdir -vp /usr/src
	cd /usr/src/
	wget -O /usr/src/psmon-1.29.tar.gz http://psmon.com/psmon-1.29.tar.gz
	if ! [ -s /usr/src/psmon-1.29.tar.gz ]; then
		wget -O /usr/src/psmon-1.29.tar.gz ${BOOTSERV_HTTPBASE}/psmon-1.29.tar.gz
	fi
	tar -zxvf /usr/src/psmon-1.29.tar.gz
	if [ -d "/usr/src/psmon-1.29" ]; then
		cd "/usr/src/psmon-1.29"
		perl Makefile.PL
		make
		make install
	fi
	cat >/etc/psmon.conf <<_EOT_
AdminEmail airoot@mcafee.com
DefaultEmailMethod sendmail
Facility LOG_DAEMON
Frequency 60
LastSafePID 100
LogLevel LOG_NOTICE
NeverKillPID 1
NeverKillProcessName kswapd kupdated mdrecoveryd pageout sched init
#NotifyEmailFrom root@hostname
ProtectSafePIDsQuietly Off
SMTPHost localhost
SMTPTimeout 20
SendmailCMD /usr/sbin/sendmail
<Process winbindd>
	LogLevel	LOG_CRITICAL
	SpawnCmd	/sbin/service winbind restart
	PidFile		/var/run/winbindd.pid
</Process>
<Process sshd>
	LogLevel	LOG_CRITICAL
	SpawnCmd	/sbin/service sshd restart
	PidFile		/var/run/sshd.pid
</Process>
<Process crond>
	spawncmd	/sbin/service crond restart
	pidfile		/var/run/crond.pid
	Instances	30
</Process>
#<Process syslog-ng>
#	LogLevel	LOG_CRITICAL
#	spawncmd	/sbin/service syslog-ng restart
#	pidfile		/var/run/syslog-ng.pid
#</Process>
<Process snmpd>
	spawncmd	/sbin/service snmpd restart
	pidfile		/var/run/snmpd.pid
</Process>
<Process nrpe>
	spawncmd	/sbin/service nrpe restart
	pidfile		/var/run/nrpe.pid
</Process>
<Process exim>
	spawncmd	/sbin/service exim restart
	pidfile		/var/run/exim.pid
</Process>
<Process httpd>
	spawncmd	/sbin/service httpd restart
	pidfile		/var/run/httpd.pid
	instances	200
</Process>
<Process ntpd>
	spawncmd	/sbin/service ntpd restart
	pidfile		/var/run/ntpd.pid
</Process>
_EOT_
	crontab -u root -l > $cfg
	cat >>$cfg <<_EOT_
# PSMON Process Monitoring
*/5 * * * * /usr/bin/psmon --daemon --cron
_EOT_
	crontab -u root $cfg
	rm -vf $cfg


	# RRD Monitoring
	announce "Adding RRD monitoring"
	cfg=/tmp/root.crontab
	mkdir -vp /usr/local/bin
	cd /usr/local/bin
	wget -O /usr/local/bin/rrd-client.pl http://rrd.me.uk/rrd-client.pl
	if ! [ -s /usr/local/bin/rrd-client.pl ]; then
		wget -O /usr/local/bin/rrd-client.pl http://mon5.ayl.eng.nai.org/rrd-client.pl
	fi
	if ! [ -s /usr/local/bin/rrd-client.pl ]; then
		wget -O /usr/local/bin/rrd-client.pl http://mon3.ayl.ase.nai.org/rrd-client.pl
	fi
	chmod -v 755 /usr/local/bin/rrd-client.pl
	chown -v root.root /usr/local/bin/rrd-client.pl
	SLEEP="`perl -e 'print int(rand(45))+7,"\n";'`"
	crontab -u root -l > $cfg
	cat >> $cfg <<_EOT_

# RRD::Simple Monitoring
*/4 * * * * sleep $SLEEP; /usr/local/bin/rrd-client.pl -q -x apache_status,cpu_temp -p http://rrd/cgi-bin/rrd-server.cgi >/dev/null

_EOT_
	crontab -u root $cfg
	rm -vf $cfg
	/usr/local/bin/rrd-client.pl -q -x apache_status,cpu_temp -p http://rrd/cgi-bin/rrd-server.cgi


	# Configure exim to use a smarthost
	announce "Configuring exim smarthost and envelope rewrite"
	perl -w <<_SCRIPT_
if (open(FH,'<','/etc/exim/exim.conf') && open(OUT,'>','/tmp/exim.conf')) {
        while (local \$_ = <FH>) {
                # Add a smarthost router before DNS
                if (m/^\s*dnslookup:\s*\$/) {
                        print OUT qq/smarthost:
  driver = manualroute
  domains = ! +local_domains
  transport = remote_smtp
  route_data = "mail.eur.nai.com"\n\n/;
                        print OUT \$_;

                # Add some address rewrite rules
                } elsif (m/^\s*begin rewrite\s*\$/) {
                        print OUT \$_;
                        print OUT "\n\n".'*@* $MAILTO F'."\n\n";

                # Keep everything else verbatim
                } else {
                        print OUT \$_;
                }
        }
        close(OUT);
        close(FH);
}
_SCRIPT_
	cp -pv /etc/exim/exim.conf /etc/exim/exim.conf-orig
	cat /tmp/exim.conf > /etc/exim/exim.conf
	service exim restart


	# Clear out the crap
	announce "Configuring Apache"
	rm -Rfv /var/www/html/*
	cat >/var/www/html/index.html <<_EOT_
<html><body>
<p>This server is maintained by the <a href='mailto:aisupport@mcafee.com'>Aylesbury Infrastructure team</a>.</p>
<p><a href='/cgi-bin/support.cgi'>Click here for additional support documentation</a>.</p>
</body></html>
_EOT_
	rm -fv /etc/httpd/conf.d/welcome.conf
	rm -fv /etc/httpd/conf.d/proxy_ajp.conf
	cat >/etc/httpd/conf.d/userdir.conf <<_EOT_
NameVirtualHost *:80
<VirtualHost *:80>
    DocumentRoot /var/www/html
    ServerAdmin aisupport@mcafee.com

    ErrorLog logs/userdir_error_log
    CustomLog logs/userdir_access_log combined
    LogLevel debug

    <IfModule mod_userdir.c>
        UserDir public_html
        UserDir disabled root admin
    </IfModule>
    <Directory /home/*/public_html>
        AllowOverride None
        Options Indexes IncludesNoExec
        Order allow,deny
        Allow from all
        Deny from none
    </Directory>
    <Directory /home/*/public_html/cgi-bin/>
        Options ExecCGI
        SetHandler cgi-script
    </Directory>
</VirtualHost>
_EOT_
	touch /var/www/cgi-bin/support.cgi
	chmod -v 555 /var/www/cgi-bin/support.cgi
	cat >/var/www/cgi-bin/support.cgi <<_EOT_
#!/usr/bin/perl -w

use strict;
use warnings;
use CGI qw();
use CGI::Carp qw(fatalsToBrowser);
use File::Spec::Functions qw(catfile catdir);
use POSIX qw(uname);

my \$node = (uname())[1];
my \$q = new CGI;
print \$q->header;

my %accounts;
for my \$acct (qx(/usr/bin/getent passwd)) {
	my (\$user,\$pass,\$uid,\$gid,\$gcos,\$dir,\$shell) = split(/:/,\$acct,7);
	next unless -d catdir(\$dir,'.support');
	\$accounts{\$user} = { uid => \$uid, gid => \$gid, gcos => \$gcos, dir  => \$dir };
}

my \$focus = \$q->param('q');
\$focus = '' if !defined \$focus || !\$accounts{\$focus};

my \$title = 'Support Documentation';
if (\$focus) {
	\$title .= " for Account \$focus";
} else {
	\$title .= " for Host \$node";
}
print \$q->start_html(-title => \$title), \$q->h1(\$title);

print \$q->hr, \$q->p(join(' | ',
		\$focus ? \$q->a({href=>'?q='},'Index') : \$q->b('Index'), 
		map { \$focus eq \$_ ? \$q->b(\$_) : \$q->a({href=>"?q=\$_"},\$_) } sort keys %accounts,
	)), \$q->hr;

if (\$focus) {
	my \$acct = \$accounts{\$focus};
	print \$q->p(\$acct->{gcos}) if defined \$acct->{gcos} && \$acct->{gcos} =~ /\S+/;

	my @lookfor = qw(VERSION README INSTALL AUTHOR BUGS ChangeLog);
	my %packages;
	for my \$file (@lookfor) {
		for my \$glob (glob(catfile(\$acct->{dir},"\$file.*"))) {
			if (\$glob =~ /\$file\.(.+)\$/) {
				\$packages{\$1} = 1;
			}
		}
	}

	sub printfile {
		my \$file = shift;
		return unless defined \$file;
		return unless -f \$file;
		if (open(FH,'<',\$file)) {
			local \$/ = undef;
			my \$txt = <FH>;
			next unless defined \$txt && \$txt =~ /\S+/;
			(my \$title = \$file) =~ s/.*\///;
			print \$q->a({name=>\$title}),\$q->h2(\$title),
				\$q->pre(\$txt);
			close(FH);
		}
	}

	for my \$file (@lookfor) {
		printfile(catfile(\$acct->{dir},\$file));
	}

	if (keys %packages) {
		for my \$package (sort keys %packages) {
			print \$q->hr;
			for my \$file (@lookfor) {
				printfile(catfile(\$acct->{dir},"\$file.\$package"));
			}
		}
	}

	my @supportFiles = glob(catfile(\$acct->{dir},'.support','*.txt'));
	if (@supportFiles) {
		print \$q->hr,\$q->a({name=>'support'});
		printfile(\$_) for @supportFiles;
	}

	my @nagiosScripts = glob(catfile(\$acct->{dir},'public_html','cgi-bin','nagios','*.cgi'));
	if (@nagiosScripts) {
		print \$q->hr,\$q->a({name=>'nagios'}),\$q->h2('Nagios Monitoring Scripts'),\$q->ul(
		\$q->li([
			map { (my \$script = \$_) =~ s/.*\///; 
				\$q->a({href=>"/~\$focus/cgi-bin/nagios/\$script"},\$script),
			} @nagiosScripts
		]));
	}

	print \$q->hr;
	print \$q->a({name=>'processes'}),\$q->h2('Running Processes'),
		\$q->pre(qx(/usr/bin/pstree -u -p -l -a \$focus) || 'None.');
	print \$q->a({name=>'cron'}),\$q->h2('Cron Jobs'),
		\$q->pre('Functionality not written yet.');
	print \$q->a({name=>'homedir'}),\$q->h2('Home Directory'),
		\$q->pre(qx(/usr/bin/tree -q -u -F -s -D -x \$acct->{dir}));

} else {
	print \$q->a({name=>'links'}),\$q->h2('Links'), \$q->ul(
		\$q->li([
			\$q->a({href=>"http://nagios.naieng.nai.org/nagios/mason/extinfo.html?host_name=\$node"},'Nagios Monitoring'),
			\$q->a({href=>"http://test.ayl.ase.nai.org/info/\$node"},'New Nagios Monitoring'),
			\$q->a({href=>"http://mon3.ayl.ase.nai.org/cgi-bin/rrd-browse.cgi?template=host.tmpl&HOST=\$node"},'mon3 RRD Graphs'),
			\$q->a({href=>"https://mon5.ayl.eng.nai.org/cgi-bin/rrd-browse.cgi?template=host.tmpl&HOST=\$node"},'mon5 RRD Graphs'),
		]));
	print \$q->a({name=>'ident'}),\$q->h2('System Indentification'),
		\$q->pre(qx(/bin/uname -a));
	print \$q->a({name=>'uptime'}),\$q->h2('Load & Uptime'),
		\$q->pre(qx(/usr/bin/uptime));
	print \$q->a({name=>'disk'}),\$q->h2('Disk Usage'),
		\$q->pre(qx(/bin/df -a -h -l -T));
	print \$q->a({name=>'netstat'}),\$q->h2('Network Listeners'),
		\$q->pre(qx(/bin/netstat -ltnu));
}

print \$q->hr, \$q->p("Last updated ".scalar(localtime)), \$q->end_html;

exit;
_EOT_


	# Disable Ctrl-Alt-Del reboot
	announce "Disabling Ctrl-Alt-Del reboot support inittab"
	perl -pi -e 's,(ca::ctrlaltdel:).*,$1 /usr/bin/logger -i -s -p kern.crit "Caught Ctrl-Alt-Del key press combination from console; ignored",;' /etc/inittab


	# Require authentication for single-user-mode
	announce "Configuring mandatory authentication for single-user-mode"
	cp -fv /etc/inittab /etc/inittab.orig
	if [ "`grep -l sulogin /etc/inittab.orig`" = "" ]; then
		awk '{ print }; /^id:[0123456sS]:initdefault:/{ print "~~:S:wait:/sbin/sulogin"}' /etc/inittab.orig > /etc/inittab
	fi
	chown root:root /etc/inittab
	chmod 644 /etc/inittab
	init q


	# Create /usr/lib/perl5/site_perl/McAfee/Preload.pm
	announce "Creating /usr/lib/perl5/site_perl/McAfee/Preload.pm"
	mkdir -vp "/usr/lib/perl5/site_perl/McAfee/"
	cat >/usr/lib/perl5/site_perl/McAfee/Preload.pm <<_EOT_
package McAfee::Preload;

use 5.6.1;
use strict;
use warnings;
use Sys::Syslog qw(:standard);

delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};
openlog(\$0, 'ndelay,pid', 'daemon');
syslog('info', 'User %s started Perl script %s with args: %s',
		scalar getpwuid(\$<), \$0, join(', ',@ARGV)
	);

1;
_EOT_

	# Configuring new user skeleton directory
	announce "Configuring new user skeleton directory"
	for dir in etc bin t logs docs lib tmp public_html/cgi-bin/nagios mnt .support;do
		mkdir -pv "/etc/skel/$dir"
	done
	for file in ChangeLog AUTHOR README INSTALL BUGS;do
		touch "/etc/skel/$file"
	done
	echo "<html><body>Hello world</body></html>" >/etc/skel/public_html/index.html
	echo "0.00" > "/etc/skel/VERSION"
	cat >>/etc/skel/.bashrc <<_EOT_
alias iamnotanumber="rm -ivR ~/AUTHOR ~/BUGS ~/ChangeLog ~/docs/ ~/etc/ ~/INSTALL ~/lib/ ~/logs/ ~/mnt/ ~/README ~/t/ ~/tmp/ ~/VERSION ~/.support/"
export PATH="\$HOME/bin:\$PATH"
export PERL5LIB="\$HOME/lib:/usr/lib/perl5/site_perl"
export LOGDIR="\$HOME/logs"
export PERL5OPT="-wT -MMcAfee::Preload"
_EOT_
	cat >>/etc/skel/README <<_EOT_
Please use the pre-created directories in this home directory wherever
possible as it helps keep managed services to a conventional and easy to
understand directory structure.

The ~public_html and ~cgi-bin directories are exposed through the Apache
webserver via the following URLs:
 * http://yourserver/~youraccount/           => ~/public_html/
 * http://yourserver/~youraccount/cgi-bin/   => ~/public_html/cgi-bin/

Please use this file to maintain essential documentation regarding the
software and services running from this account. This document should contain
the following information:

 * Software author(s)
 * RPM author(s) 
 * Department
 * Contact details for departmental / developer support during working hours
   - contact name, desk number, mobile, email etc 
 * Contact details for departmental / developer outside of hours support
   - contact name, desk number, mobile, email etc

 * List of cron processes - when they should run, why, and what they do 
 * List of daemon processes - when they should be running, why and what they do 
 * List of databases used 
 * List of any special filesystem mount points required - if they're essential
   or not, if they can unmounted or remounted safely
 * List of any listening network ports, sockets or pipes that exist as a result
   of the software installed - what they're used for and why 
 * List of all outgoung external network connections that are made by the
   software - what they're used for any why

 * Software prerequisites required to install and operate the software
   (anything above and beyond a bare bones, only just boots up Linux OS). This
   should be more or less the same as all the RPM prerequisites - we should
   not need to be asked to install anything beyond what the RPM prerequisites
   indicate (except database server availability etc)

 * List of configuration files + descriptions 
 * List of executable files and scripts + descriptions 
 * List of log files + descriptions (and if they can be safely deleted) 
 * List of any state files + descriptions (and if they can be safely deleted)

 * How to start up any daemons or software 
 * How to safely stop any daemons or software 
 * How to safely restart any daemons or software 
 * How to run any daemons or software in debug mode if necessary

 * Any special file permissions required (files which need to have +x,
   directories/files which need +w)

_EOT_
	touch /etc/skel/public_html/cgi-bin/nagios/example.cgi
	chmod -v 755 /etc/skel/public_html/cgi-bin/nagios/example.cgi
	cat >/etc/skel/public_html/cgi-bin/nagios/example.cgi <<_EOT_
#!/usr/bin/perl -w

use strict;
use warnings;
use CGI qw();

my \$q = new CGI;
my %status = (
	OK       => [qw(009900 200)],
	WARNING  => [qw(999900 400)],
	CRITICAL => [qw(990000 500)],
	#UNKNOWN  => [qw(999999 500)],
	);
my \$state = 'CRITICAL';
my \$msg = '(No output!)';

eval {
###########################################################
# Your code to check if something is working or not would
# go in here. For the purposes of this example, we are
# randomly setting the state of the service to either OK,
# WARNING, CRITICAL or UNKNOWN from the list of valid
# states stored in %status.
	\$state = (keys %status)[rand(scalar(keys(%status)))];
	\$msg = 'Some useful output to describe the state of the service you are checking';
###########################################################
};
\$msg = \$@ if \$@;

print	\$q->header(-status => sprintf('%s %s', \$status{\$state}->[1], \$msg)),
	\$q->start_html(-title => sprintf('%s - %s', \$state, \$msg)),
	\$q->h1({-style => "color: #\$status{\$state}->[0];"}, sprintf('%s - %s', \$state, \$msg)),
	\$q->end_html;

exit;
_EOT_


	# Restrict root logins to system console
	announce "Restricting root logins to system console"
	cfg=/etc/securetty
	cp -vp "$cfg" "$cfg.orig"
	cp -v /dev/null "$cfg"
	echo tty1 >>"$cfg"
	for i in 2 3 4 5 6; do
		echo "#tty$i" >>"$cfg"
	done
	echo vc/1 >>"$cfg"
	for i in 2 3 4 5 6; do
		echo "#tty$i" >>"$cfg"
	done
	echo console >>"$cfg"
	chown -v root:root "$cfg"
	chmod -v 400 "$cfg"


	# Secure networking a little more
	announce "Securing network settings in sysctl.conf"
	cat <<__EOC__ >>/etc/sysctl.conf
net.ipv4.tcp_max_syn_backlog = 4096
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.ip_forward = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
__EOC__
	chown -v root:root /etc/sysctl.conf
	chmod -v 0600 /etc/sysctl.conf


	# Disable some services
	announce "Disabling some services"
	for svc in autofs cpuspeed kudzu mdmonitor rhnsd rawdevices rpcsvcgssd rpcgssd smartd gpm gam_server pcscd; do
		logmsg "Disabling $svc"
		chkconfig --level 12345 $svc off
		service $svc stop
	done
	for svc in apmd atd anacron isdn pcmcia smartd; do
		logmsg "Disabling $svc"
		service $svc stop
		chkconfig --del $svc
	done
	for svc in mdmpd netfs nfslock portmap rpcidmapd sendmail smartd; do
		logmsg "Disabling $svc"
		chkconfig --level 12345 $svc off
	done


	# Remove IPv6 applications
	announce "Removing IPv6 applications"
	for file in /bin/ping6 /usr/sbin/ping6 /bin/traceroute6 /usr/sbin/traceroute6 /bin/tracepath6 /usr/sbin/tracepath6; do
		if [ -e "$file" ]; then
			logmsg "Deleting $file"
			rm -fv "$file"
		fi
	done


	# Secure cron
	announce "Securing cron"
	rm -fv /etc/cron.deny /etc/at.deny
	echo root >/etc/cron.allow
	echo root >/etc/at.allow
	chown -v root:root /etc/cron.allow /etc/at.allow
	chmod -v 400 /etc/cron.allow /etc/at.allow
	chown -v root:root /etc/crontab
	chmod -v 400 /etc/crontab
	chown -vR root:root /var/spool/cron
	chmod -vR go-rwx /var/spool/cron
	chown -vR root:root /etc/cron.*
	chmod -vR go-rwx /etc/cron.*


	# Secure grub
	announce "Securing grub"
	chown -v root:root /etc/grub.conf
	chmod -v 600 /etc/grub.conf


	# Secure /etc/services
	announce "Securing /etc/services"
	chattr +i /etc/services


	# Secure /boot a little
	announce "Securing /boot"
	awk '($2 ~ /\/boot/) { $4 = $4 ",nodev,ro" }; { print }' /etc/fstab >/etc/fstab.new
	mv -fv /etc/fstab.new /etc/fstab
	chown -v root:root /
	chmod -v 0644 /etc/fstab


	# Secure RPM
	announce "Securing /bin/rpm binary"
	chmod -v 700 /bin/rpm


	# Remove unnecessary system accounts
	announce "Removing unnecessary system accounts"
	# haldaemon pcap 
	for user in adm lp shutdown halt news uucp operator games gopher ftp netdump mailnull rpc xfs; do
		logmsg "Removing user '$user'"
		userdel "$user"
	done
	for group in adm lp news uucp games dip; do
		logmsg "Removing group '$group'"
		groupdel "$group"
	done


	# Tighten scripts under /etc/rc.d/init.d/
	announce "Securing scripts under /etc/rc.d/init.d/"
	chmod -vR 700 /etc/init.d/*


	# Disable SUID on selected binaries
	announce "Disabling SUID on selected binaries"
	for file in /usr/libexec/openssh/ssh-keysign /usr/libexec/pt_chown /usr/bin/rlogin /usr/bin/wall /usr/bin/gpasswd /usr/bin/write /usr/bin/chfn  usr/bin/newgrp /usr/bin/rsh /usr/bin/chsh /usr/bin/chage /usr/bin/rcp /usr/sbin/userhelper /usr/sbin/usernetctl /bin/traceroute /bin/umount /bin/mount /sbin/netreport; do
		if [ -e "$file" ]; then
			logmsg "Removing SUID from '$file'"
			chmod -v a-s "$file"
		fi
	done


	# Secure various binaries that only root and wheel should use
	announce "Securing administrative-only binaries"
	# /usr/bin/ftp /usr/kerberos/bin/ftp
	for file in /usr/bin/telnet /usr/kerberos/bin/telnet /usr/bin/nc /usr/bin/w /usr/bin/who /usr/bin/last /bin/dmesg; do
		if [ -e "$file" ]; then
			logmsg "Securing '$file'"
			chown -v root:wheel "$file"
			chmod -v o-rwx "$file"
		fi
	done


	function joindomain() {
		# Just in case, because we locked down the
		# sodding environment so damned much! ;-)
		PATH=$PATH:/bin:/usr/bin:/sbin:/usr/sbin

		# Get the AD controller host name
		ADHOST="$1"
		if [ -z "$ADHOST" ]; then
			echo "Syntax: $0 <adhost> <adminusername>" >&2
			return
			#exit 253
		fi

		# Get the AD admin username
		ADMINUSER="$2"
		if [ -z "$ADMINUSER" ]; then
			echo "Syntax: $0 <adhost> <adminusername>" >&2
			return
			#exit 254
		fi

		# Determine the IP address
		ADIP=`host "$ADHOST"`
		if [ "$?" -eq "0" ]; then
			ADIP=`echo "$ADIP" | awk '{print $4}'`
		else
			echo "Cannot resolve AD host '$ADHOST'; aborting!" >&2
			return
			#exit 255
		fi

		# Set the AD realm and domain
		ADREALM=`echo "$ADHOST" | cut -d'.' -f2- | tr 'a-z' 'A-Z'`
		ADDOMAIN=`echo "$ADREALM" | cut -d'.' -f1`

		echo "################# Configuration #################"
		echo "ADHOST='$ADHOST'"
		echo "ADIP='$ADIP'"
		echo "ADREALM='$ADREALM'"
		echo "ADDOMAIN='$ADDOMAIN'"
		# echo "Press [Enter] to continue ..."
		# read knickers

		# Install RPMs if necessary
		if	! rpm -qa samba | grep samba >/dev/null 2>&1 || \
			! rpm -qa samba-common | grep samba-common >/dev/null 2>&1 || \
			! rpm -qa samba-client | grep samba-client >/dev/null 2>&1 ; then
			yum -y install samba samba-common samba-client
		fi
		if	! rpm -qa ntp | grep ntp >/dev/null 2>&1 ; then
			yum -y install ntp
		fi
 
		# Clear away old configuration
		FILES="samba/smb.conf"
		for file in $FILES; do
			if [ -f "/etc/$file" ]; then
				mv -fv "/etc/$file" "/etc/$file.orig"
			fi
		done
 
		# Sync time against the AD host
		service ntpd stop
		cat >/etc/ntp.conf <<_EOT_
# Automagically regenerated by $0
restrict default kod nomodify notrap nopeer noquery
restrict -6 default kod nomodify notrap nopeer noquery
restrict 127.0.0.1 
restrict -6 ::1
driftfile /var/lib/ntp/drift
keys /etc/ntp/keys
server $ADHOST
server aylcorpdc1.corp.nai.org
server slocorpdc1.corp.nai.org
server ntp1.ayl.eng.nai.org
server ns1.ayl.ase.nai.org
server 127.127.1.0
fudge	127.127.1.0 stratum 10	
_EOT_
		for host in ntp1.ayl.eng.nai.org ns1.ayl.ase.nai.org aylcorpdc1.corp.nai.org slocorpdc1.corp.nai.org $ADHOST
		do
			ntpdate $host
		done

		# Turn on samba and winbind etc
		for service in smb winbind ntpd; do
			chkconfig $service on
			service $service restart
		done

		# Change the config
		authconfig \
			--updateall \
			--update \
			--enableshadow \
			--enablemd5 \
			--enablewinbind \
			--enablewinbindauth \
			--smbsecurity=ads \
			--smbrealm=$ADREALM \
			--smbworkgroup=$ADDOMAIN \
			--smbservers=$ADHOST \
			--winbindtemplatehomedir=/home/%U \
			--winbindtemplateshell=/bin/bash \
			--winbindjoin=$ADADMINUSER \
			--enablewinbindusedefaultdomain \
			--disablesmartcard \
			--disablerequiresmartcard \
			--enablemkhomedir \
			--enablewins \
			--enablepreferdns \
			--enablelocauthorize \
			--krb5kdc=$ADHOST \
			--krb5adminserver=$ADHOST \
			--krb5realm=$ADREALM \
			--disablenis \
			--disablekrb5 \
			--disableldap \
			--disableldapauth


		# Add extra stuff to samba/smb.conf
		cat >>/etc/samba/smb.conf <<_EOT_
   # Automagically added by $0
   encrypt passwords = yes
   winbind enum users = yes
   winbind enum groups = yes
   add machine script = /usr/sbin/useradd -d /var/lib/nobody -g 100 -s /bin/false -M %u
_EOT_
 
		# Force a restart on this peice of krud
		for service in smb winbind; do
			service $service stop
			sleep 1
			killall -9 ${service}d
			sleep 1
			service $service start
		done

		# Show the resulting configuration
		for file in $FILES nsswitch.conf; do
			if [ -f "/etc/$file" ]; then
				echo
				echo "################# /etc/$file #################"
				pcregrep -v "^\s*([#;].*|\s*)$" "/etc/$file"
			fi
		done

		# Add the AD KDC to /etc/hosts in case DNS
		# goes away for a while.
		cat "$ADIP	$ADHOST" >>/etc/hosts

		echo
		echo "################# winbind #################"
		ps -ef | grep winbind
		echo
	 
		# Join the domain
		# net join -U $ADMINUSER@$ADREALM

		# Report list of users
		echo
		wbinfo -u | tail -n 4
		wbinfo -g | tail -n 4
		getent passwd | tail -n 4
	}



	# Configure active directory authentication
	annouce "Configuring $ADDOMAIN active directory authentication"
	joindomain $ADHOST a-engineering


	# Install patched version of bash that logs to syslog
	announce "Installing syslog patched version of bash"
	rpm --force -Uvh ${BOOTSERV_HTTPBASE}/bash-3.2-24.el5.x86_64.syslog.rpm

	# List initial packages installed
	announce "Listing initial packages installed to log files"
	rpm -qa --queryformat '%{NAME}\n' | sort > "$LOGDIR/rpm-novers.`date +%Y-%m-%d`"
	rpm -qa | sort > "$LOGDIR/rpm-list.`date +%Y-%m-%d`"

	# Report on listening network ports
	announce "Reporting on listening network ports"
	netstat -ltnup > "$LOGDIR/netstat.`date +%Y-%m-%d`"

	# Report on current network configuration
	announce "Reporting on current network configuration"
	ifconfig -a > "$LOGDIR/ifconfig.`date +%Y-%m-%d`"

	# Report on current hardware configuration
	announce "Reporting on current hardware configuration"
	dmidecode > "$LOGDIR/dmidecode.`date +%Y-%m-%d`"

	# Report on all RPM changes
	announce "Reporting on all RPM package changes"
	rpm -aV > "$LOGDIR/rpm-av.`date +%Y-%m-%d`"

	# Update locate db
	announce "Updating locate database"
	updatedb

	# Completed
	announce "COMPLETED"
}

#question
kickstart
exit 0
) 2>&1 | tee "$LOGDIR/kickstart.log"


# Mail out the results
UUID="`dmidecode | grep UUID | awk '{print $2}'`"
cd "$LOGDIR"
cat * | mail -s "Kickstart build report for UUID $UUID" $MAILTO

# Return the terminal
chvt 1


